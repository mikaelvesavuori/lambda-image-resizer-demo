service: lambda-image-resizer-demo

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  stage: ${opt:stage, 'prod'}
  region:  ${opt:region, 'eu-north-1'}
  memorySize: ${opt:memory, 1536}
  timeout: ${opt:timeout, 20}
  logRetentionInDays: ${param:logRetentionInDays, 7}
  versionFunctions: false
  httpApi:
    cors: true
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    service: ${self:service}
  tags:
    service: ${self:service}

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  imagesBucketArn: arn:aws:s3:::${self:custom.imagesBucketName}
  imagesBucketName: ${self:service}-some-random-value # SET THIS VALUE
  imagesBucketPrefix: original/ # Path in S3
  resizedImagesPath: images-resized # Path in S3
  esbuild:
    bundle: true
    minify: true
    external:
      - sharp
    packagerOptions:
      scripts:
        - npm install --os=linux --cpu=arm64 sharp

functions:
  ImageConverter:
    handler: src/handler.handler
    description: Convert image
    events:
      # API: Pass in a JPG file as binary content
      - httpApi:
          method: POST
          path: /
      # Event-driven: Create resized versions of files entering an S3 path
      - s3:
          bucket: ${self:custom.imagesBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${self:custom.imagesBucketPrefix}
            - suffix: .jpg
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource: "${self:custom.imagesBucketArn}/*"
    environment:
      BUCKET_NAME: ${self:custom.imagesBucketName}
      RESIZED_IMAGES_PATH: ${self:custom.resizedImagesPath}